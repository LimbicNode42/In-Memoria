# Production Docker Setup
# Includes PostgreSQL and Qdrant services

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: inmemoria-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-in_memoria}
      POSTGRES_USER: ${POSTGRES_USER:-inmemoria_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Please set POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - inmemoria
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-inmemoria_user} -d ${POSTGRES_DB:-in_memoria}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database  
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: inmemoria-qdrant
    ports:
      - "${QDRANT_HTTP_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
      - ./config/qdrant-config.yaml:/qdrant/config/production.yaml:ro
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: ${QDRANT_LOG_LEVEL:-INFO}
    networks:
      - inmemoria
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ./qdrant --config-path config/production.yaml

  # Redis (optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: inmemoria-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    networks:
      - inmemoria
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
        if [ -n '$$REDIS_PASSWORD' ]; then
          redis-server --requirepass $$REDIS_PASSWORD --appendonly yes
        else
          redis-server --appendonly yes
        fi
      "

  # In-Memoria Application
  inmemoria:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: inmemoria-app
    environment:
      # Environment
      NODE_ENV: production
      
      # PostgreSQL Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-in_memoria}
      POSTGRES_USER: ${POSTGRES_USER:-inmemoria_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Please set POSTGRES_PASSWORD}
      POSTGRES_SSL: "false"  # Internal network, no SSL needed
      POSTGRES_POOL_SIZE: ${POSTGRES_POOL_SIZE:-10}
      
      # Qdrant Configuration
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION: ${QDRANT_COLLECTION:-in-memoria}
      QDRANT_VECTOR_SIZE: ${QDRANT_VECTOR_SIZE:-1536}
      QDRANT_DISTANCE: ${QDRANT_DISTANCE:-cosine}
      
      # Redis Configuration (optional)
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY:?Please set OPENAI_API_KEY}
      
      # In-Memoria Configuration
      IN_MEMORIA_STORAGE_MODE: remote
      IN_MEMORIA_LOG_LEVEL: ${LOG_LEVEL:-info}
      IN_MEMORIA_ENABLE_PERFORMANCE_LOGGING: ${ENABLE_PERFORMANCE_LOGGING:-false}
      
      # MCP Server Configuration
      MCP_SERVER_PORT: ${MCP_SERVER_PORT:-3000}
      
    volumes:
      # Mount your codebase here
      - ${WORKSPACE_PATH:?Please set WORKSPACE_PATH}:/workspace:ro
      # Optional: Mount specific project
      - ${PROJECT_PATH:-./example-project}:/project:ro
    ports:
      - "${MCP_SERVER_PORT:-3000}:3000"
    networks:
      - inmemoria
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: inmemoria-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - inmemoria
    depends_on:
      - inmemoria
    restart: unless-stopped
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  qdrant_storage:
    driver: local  
  redis_data:
    driver: local

networks:
  inmemoria:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
