# Multi-stage production Dockerfile
FROM node:18-alpine AS builder

# Install build dependencies including Rust
RUN apk add --no-cache python3 make g++ git curl

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY tsconfig.production.json ./

# Install all dependencies (needed for build)
RUN npm ci

# Copy source code
COPY src/ ./src/
COPY rust-core/ ./rust-core/

# Build the application (excluding test files)
RUN npm run build:prod

# Remove dev dependencies after build
RUN npm prune --production

# Production stage
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache curl

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S inmemoria -u 1001

WORKDIR /app

# Copy built application
COPY --from=builder --chown=inmemoria:nodejs /app/dist ./dist
COPY --from=builder --chown=inmemoria:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=inmemoria:nodejs /app/package*.json ./

# Create necessary directories
RUN mkdir -p /workspace /project /app/data && \
    chown -R inmemoria:nodejs /workspace /project /app/data

# Switch to non-root user
USER inmemoria

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start the application
CMD ["node", "dist/index.js", "server"]
